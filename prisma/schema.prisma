generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Colaborador {
  uuid         String  @id @default(uuid())
  nomeCompleto String
  cpf          String  @unique
  isAtivo      Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Cliente                Cliente[]
  EnderecoColaborador    EnderecoColaborador[]
  DPessoaisColaborador   DPessoaisColaborador[]
  colaborador_has_funcao colaborador_has_funcao[]
  Equipe                 Equipe[]
  Contrato               Contrato[]
  login                  login[]
  agendaCliente          agendaCliente[]
}

model login {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  autorizado       Boolean
  email            String      @unique
  senha            String
  acesso           String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model blacklist {
  tokenexpirado String @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EnderecoColaborador {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  endereco         String
  rua              String
  bairro           String
  cidade           String
  estado           String
  cep              String
  pais             String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DPessoaisColaborador {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  nascimento       DateTime
  sexo             String
  rg               String      @unique
  dataEmissao      DateTime
  oExpedidor       String
  eCivel           String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Equipe {
  colaborador Colaborador @relation(fields: [vendedor], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  lider       String
  vendedor    String
  idEquipe    String      @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Funcao {
  uuid String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  descricao String

  colaborador_has_funcao colaborador_has_funcao[]
}

model colaborador_has_funcao {
  uuid String @id @default(uuid())

  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String
  funcao           Funcao      @relation(fields: [funcao_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  funcao_uuid      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cliente {
  uuid             String      @id @default(uuid())
  nomeCompleto     String
  cpf              String      @unique
  isAtivo          Boolean
  colaborador_uuid String
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  EnderecoCliente       EnderecoCliente[]
  DPessoaisCliente      DPessoaisCliente[]
  DadosBancariosCliente DadosBancariosCliente[]
  Contrato              Contrato[]
}

model EnderecoCliente {
  cliente      Cliente @relation(fields: [cliente_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  cliente_uuid String  @id
  endereco     String
  rua          String
  bairro       String
  cidade       String
  estado       String
  cep          String
  pais         String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DPessoaisCliente {
  cliente       Cliente  @relation(fields: [cliente_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  cliente_uuid  String   @id
  nascimento    DateTime
  sexo          String
  rg            String
  dataEmissao   DateTime
  oExpedidor    String
  fotoDocumento String
  profissao     String
  rendimento    Float
  eCivel        String
  celular       String
  whatsapp      String
  email         String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model agendaCliente {
  uuid             String      @id @default(uuid())
  cliente          String
  telefone         String      @unique
  whatsapp         String
  dataParaLigar    String
  horaParaLigar    String
  colaborador_uuid String
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DadosBancariosCliente {
  cc           String
  cp           String
  agencia      String
  cliente      Cliente @relation(fields: [cliente_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  cliente_uuid String  @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model TipoConsorcio {
  id        Int    @id @default(autoincrement())
  descricao String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Contrato Contrato[]
}

model Contrato {
  id                      Int           @id @default(autoincrement())
  cliente                 Cliente       @relation(fields: [cliente_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  cliente_uuid            String
  colaborador             Colaborador   @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  colaborador_uuid        String
  tipoConsorcio           TipoConsorcio @relation(fields: [tipoConsorcio_descricao], references: [descricao], onDelete: NoAction, onUpdate: NoAction)
  tipoConsorcio_descricao String
  // assinatura String
  dataCriado              DateTime      @default(now())
  diaVencimento           String
  valorBem                Float
  planoNovo               Boolean
  isAtivo                 Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Boleto       Boleto[]
  Contemplacao Contemplacao[]
}

model Financeira {
  financeira_id Int    @id @default(autoincrement())
  cnpj          String @unique
  razaoSocial   String @unique
  contrato      String @unique
  gerente       String
  email         String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Boleto Boleto[]
}

model Boleto {
  boleto_id Int @id @default(autoincrement())

  Contrato      Contrato   @relation(fields: [contrato_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contrato_id   Int
  Financeira    Financeira @relation(fields: [financeira_id], references: [financeira_id], onDelete: NoAction, onUpdate: Cascade)
  financeira_id Int

  parcela    Float
  valor      Float
  vencimento DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Contemplacao {
  contemplacao_id  Int      @id @default(autoincrement())
  tipoContemplacao String
  data             DateTime
  lance            Float

  Contrato    Contrato @relation(fields: [contrato_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contrato_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
