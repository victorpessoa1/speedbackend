generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Colaborador {
  uuid         String  @id @default(uuid())
  nomeCompleto String
  cpf          String  @unique
  isAtivo      Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Cliente                Cliente[]
  EnderecoColaborador    EnderecoColaborador[]
  DPessoaisColaborador   DPessoaisColaborador[]
  colaborador_has_funcao colaborador_has_funcao[]
  Equipe                 Equipe[]
  Contrato               Contrato[]
  login                  login[]
  agendaCliente          agendaCliente[]
  tarefas                tarefas[]
  historicoTarefas       historicoTarefas[]
}

model login {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  autorizado       Boolean
  email            String      @unique
  senha            String
  acesso           String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model blacklist {
  tokenexpirado String @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EnderecoColaborador {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  endereco         String
  rua              String
  bairro           String
  cidade           String
  estado           String
  cep              String
  pais             String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DPessoaisColaborador {
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String      @id
  nascimento       String
  sexo             String
  rg               String      @unique
  dataEmissao      String
  localemissao     String?
  oExpedidor       String
  eCivel           String
  id_botconversa   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Equipe {
  colaborador Colaborador @relation(fields: [vendedor], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  lider       String
  vendedor    String
  idEquipe    String      @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Funcao {
  uuid String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  descricao String

  colaborador_has_funcao colaborador_has_funcao[]
}

model colaborador_has_funcao {
  uuid String @id @default(uuid())

  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  colaborador_uuid String
  funcao           Funcao      @relation(fields: [funcao_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  funcao_uuid      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cliente {
  uuid             String      @id @default(uuid())
  nomeCompleto     String
  cpf              String      @unique
  isAtivo          Boolean
  colaborador_uuid String
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  EnderecoCliente  EnderecoCliente[]
  DPessoaisCliente DPessoaisCliente[]
  Contrato         Contrato[]
}

model EnderecoCliente {
  cliente      Cliente @relation(fields: [cliente_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  cliente_uuid String  @id
  endereco     String
  rua          String
  bairro       String
  cidade       String
  estado       String
  cep          String
  pais         String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DPessoaisCliente {
  cliente        Cliente @relation(fields: [cliente_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  cliente_uuid   String  @id
  nascimento     String
  sexo           String
  rg             String
  dataEmissao    String
  localemissao   String?
  oExpedidor     String
  fotoDocumento  String
  profissao      String
  rendimento     String
  eCivel         String
  celular        String
  whatsapp       String
  email          String
  id_botconversa String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model agendaCliente {
  uuid       String  @id @default(uuid())
  criado_por String
  privado    Boolean @default(true)
  note       String
  startTime  String
  endTime    String
  conclusao  Boolean
  subject    String
  prioridade Int
  isAllDay   Boolean @default(false)

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  Colaborador     Colaborador? @relation(fields: [colaboradorUuid], references: [uuid])
  colaboradorUuid String?
}

model tarefas {
  uuid             String      @id @default(uuid())
  nometarefa       String
  nomecliente      String
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  colaborador_uuid String
  dataentrega      String?     @default("em espera")
  telefonecliente  String
  horapraligar     String?
  statustarefa     String      @default("em espera")
  obs              String
  aceito           Boolean     @default(false)

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  historicoTarefas historicoTarefas[]
}

model historicoTarefas {
  tarefas          tarefas     @relation(fields: [tarefa_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  tarefa_uuid      String
  uuid             String      @id @default(uuid())
  nometarefa       String
  nomecliente      String
  colaborador      Colaborador @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  colaborador_uuid String
  dataentrega      String?
  telefonecliente  String
  horapraligar     String?
  statustarefa     String
  obs              String
  aceito           Boolean

  movimentacao   String // recusado / atualizado / timeout / mandado pelo front
  atualizado_por String // colaborador / timeout

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model TipoConsorcio {
  id        Int    @id @default(autoincrement())
  descricao String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Contrato Contrato[]
}

model Contrato {
  id                      Int           @id @default(autoincrement())
  cliente                 Cliente       @relation(fields: [cliente_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  cliente_uuid            String
  colaborador             Colaborador   @relation(fields: [colaborador_uuid], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  colaborador_uuid        String
  tipoConsorcio           TipoConsorcio @relation(fields: [tipoConsorcio_descricao], references: [descricao], onDelete: NoAction, onUpdate: NoAction)
  tipoConsorcio_descricao String
  financeira              Financeira    @relation(fields: [financeira_id], references: [financeira_id], onDelete: NoAction, onUpdate: NoAction)
  financeira_id           Int
  banco                   String?
  conta                   String?
  tipoConta               String        @default("corrente")
  agencia                 String?
  assinatura_cliente      Int[]
  assinatura_colaborador  Int[]
  assinatura_testemunha_a Int[]
  assinatura_testemunha_b Int[]
  dataCriado              DateTime      @default(now())
  diaVencimento           String
  valorBem                Float
  planoNovo               Boolean
  isAtivo                 Boolean
  pParcela                String?       @default("0")
  nParcelas               Int           @default(1)
  obs                     String?
  long                    String?
  lat                     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Boleto       Boleto[]
  Contemplacao Contemplacao[]
}

model Financeira {
  financeira_id Int    @id @default(autoincrement())
  cnpj          String @unique
  razaoSocial   String @unique
  gerente       String
  email         String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Boleto   Boleto[]
  Contrato Contrato[]
  Grupo    Grupo[]
}

model Grupo {
  uuid          String     @id @default(uuid())
  financeira    Financeira @relation(fields: [financeira_id], references: [financeira_id], onDelete: Cascade, onUpdate: Cascade)
  financeira_id Int
  grupo         String
  Cota          Cota[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model Cota {
  uuid       String @id @default(uuid())
  grupo      Grupo  @relation(fields: [grupo_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  grupo_uuid String
  cota       String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model Boleto {
  boleto_id Int @id @default(autoincrement())

  Contrato      Contrato   @relation(fields: [contrato_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contrato_id   Int
  Financeira    Financeira @relation(fields: [financeira_id], references: [financeira_id], onDelete: NoAction, onUpdate: Cascade)
  financeira_id Int

  parcela       Float
  valor         Float
  vencimento    String
  isPago        Boolean?
  dataPagamento String?
  obs           String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Contemplacao {
  contemplacao_id  Int    @id @default(autoincrement())
  tipoContemplacao String
  data             String
  lance            Float

  Contrato    Contrato @relation(fields: [contrato_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contrato_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
